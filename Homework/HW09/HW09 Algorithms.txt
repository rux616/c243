number of arrays
	number of tests
		number of sorting algorithms





struct qsParams
{
	int *a; //pointer to main array [0]
	int first;
	int last;
	int *usable_threads; //pointer to the number of usable threads
}



Smart Quick Sort Driver 
-----------------------
[Inputs]
int a[]
int size
int usable_threads

[Algorithm]

if number_of_elements_to_sort < SOME_NUMBER
	binaryInsertionSort() *OR?* linearInsertionSort()
end if




int max_number_of_threads = MAX_THREADS

quickSortParallel()



Smart Quick Sort Parallel [quickSortParallel()]
-------------------------
[Inputs]
int a[]
int first
int last
int &usable_threads

[Algorithm]
if number_of_elements_to_sort < SOME_NUMBER
	binaryInsertionSort() *OR* linearInsertionSort()
endif

determinePivot
partitionSubArray

if (usable_threads > 0)
	multithread(quickSortParallel(a[], , , --usable_threads))
	multithread(quickSortParallel(a[], , , --usable_threads))
	wait_for_multithread
else
	quickSortParallel(a[], , , usable_threads)
	quickSortParallel(a[], , , usable_threads)
endif

++usable_threads



Partition
---------
[Inputs]
int a[]















